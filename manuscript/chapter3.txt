# 第3章 [iOS Certificates - Apple Developer](https://developer.apple.com/account/ios/certificate)での作業

この章では、プッシュ通知をするにあたり前もって[iOS Certificates - Apple Developer](https://developer.apple.com/account/ios/certificate)にて必要な作業を説明していきます。

## 3.1 [iOS Certificates - Apple Developer](https://developer.apple.com/account/ios/certificate)での作業手順

device tokenの取得には[Apple Developer Program](https://developer.apple.com/programs/jp/)への登録が必要です。個人の場合は、2017年7月7日時点で年間11,800円です。詳しくは公式サイトの説明などご覧ください。本書では具体的な登録手順は割愛し、開発者登録済みの前提で説明していきます。

### [iOS Certificates - Apple Developer](https://developer.apple.com/account/ios/certificate)にアクセス

[Apple Developer Account](https://developer.apple.com/account/)サイトトップに、`Certificates, IDs & Profiles`へのリンクがあるのでそこから[iOS Certificates - Apple Developer](https://developer.apple.com/account/ios/certificate)にアクセスできます。

![キャプションテスト](images/chapter3/account.png)

では、以下このサイト上での各手順を説明していきます。すでに作成済みの項目があれば適宜スキップしてください。

### 証明書を作成

1. Keychainアプリを起動し、メニューからCartificate Assistant → Request a Certificate From a Certificate Authority...を選択
2. Request isの項目を、Save to diskに変更してContinueを押して保存
3. Certificates - Allを選択
4. +ボタンを押す
5. 作りたい証明書の種類に合わせていずれかを選択
    - デバッグ実行用: Development - iOS App Development
    - AdHoc配布・AppStore用: Production - App Store and Ad Hoc
6. 手順2で保存した証明書を選択して次へ
7. 生成された証明書をダウンロード・実行してKeychainにインストール
  - 秘密鍵と公開鍵のペアを安全な場所にバックアップしておく

![](images/chapter3/cert1.png)

![](images/chapter3/cert2.png)

![](images/chapter3/cert3.png)

![](images/chapter3/cert4.png)

![](images/chapter3/cert5.png)

![](images/chapter3/cert6.png)

### プッシュ通知発行に必要なKeyファイルを生成・ダウンロード

プッシュ通知発行は2015年12月に、HTTP/2形式の新しいやり方ができたため、そちらでのやり方を説明します。また、古い方式との差は本章末尾の「3.2 プッシュ通知送信の2つの方式」で説明します。

次の手順通りに操作して、プッシュ通知発行に必要なKeyファイルを生成・ダウンロードしておきます。

1. Keys -  Allを選択
2. +ボタンを押す
3. Key名を入力
  - 区別できれば何でも良い
4. APNsのチェックをつける
  - [DeviceCheck](https://developer.apple.com/documentation/devicecheck)のチェックはどちらでも良い
5. Confirmを押す
6. Key IDを確認
  - この後、いつでも確認可能
7. Downloadボタンを押して`AuthKey_KEYID.p8`というKeyファイルをダウンロード
  - 記載の説明の通り、ダウンロードは1回しかできないので、ダウンロードしたKeyファイルは速やかに安全な場所に保存
  - これを失くすと、プッシュ通知を送信できず再発行が必要になる

![](images/chapter3/certificate.png)

![](images/chapter3/new_key1.png)

![](images/chapter3/new_key2.png)

### App IDを生成

単に実機実行したいだけであれば、[Xcode 7以降は無料で行えるようになりました](http://qiita.com/FumihikoSHIROYAMA/items/a754f77c41b585c90329)。ただ、プッシュ通知を使う場合は、開発者登録して、明示的なApp ID(Wildcaseでは無いApp ID)を生成する必要があります。このApp IDでアプリが一意に区別されます。

App IDの生成は以下の手順で行います。

1. Identifiers - App IDsを選択
2. +ボタンを押す
3. App ID DescriptionのNameを記入
  - 区別できれば何でも良い
4. Explicit App ID(明示的なApp ID)を記入
  - 世界で一意である必要がある
  - `YOUR_DOMAIN.アプリ名`が推奨
5. Confirm → Registerと押して生成

![](images/chapter3/app_id1.png)

![](images/chapter3/app_id2.png)

### 端末のUDIDの登録

明示的なApp ID指定をしたアプリを実機実行するには、端末のUDID登録が必要です。

まずは端末のUDIDを[iPhoneなどのUDIDを調べる方法 | MUSHIKAGO APPS MEMO](http://mushikago.com/i/?p=1833)などを参考に調べておきます。

次に、以下の手順で登録します。

1. Devices - Allを選択
2. +ボタンを押す
3. 端末のNameを入力
  - 区別できれば何でも良い
4. 調べておいたUDIDを入力

![](images/chapter3/device1.png)

![](images/chapter3/device2.png)

詳しくは割愛しますが、端末登録は[fastlane/register_devices](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/register_devices.rb)という[fastlane](https://fastlane.tools)のアクションを用いることで、コマンドで済ませることもできます。


#### アクションの実行例

```ruby
register_devices(devices_file: "devices.txt")
```

#### デバイス一覧ファイルの例

```txt
Device ID	Device Name
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx	Masayuki Ono - iPhone 7 Plus
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx	Masayuki Ono - iPhone 7 Plus2
```

### Provisioning Profileの作成

最後に、次の手順で、上で作成した証明書・App ID・端末を紐付けるProvisioning Profileを作成します。

1. Provisioning Profiles - Allを選択
2. +ボタンを押す
3. 作りたいProvisioning Profileの種類を選択(基本的には、まずはデバッグ実行用)
    - デバッグ実行用: Development - iOS App Development
    - AdHoc配布用: Distribution - Ad Hoc
    - AppStore用: Distribution - App Store 
4. 紐付けるApp IDで先ほど作ったApp IDを選択
5. 紐付ける証明書を選択
6. 紐付ける端末を選択
    - App Storeの時はこの項目は無し
7. Provisioning Profile名を入力
  - 区別できれば何でも良い


![](images/chapter3/pp1.png)

![](images/chapter3/pp2.png)

![](images/chapter3/pp3.png)

![](images/chapter3/pp4.png)

![](images/chapter3/pp5.png)

![](images/chapter3/pp6.png)

作成したProvisioning Profileはダウンロードして開くとKeychainに読み込まれます。

また、XcodeのPreferenceのAccountsタブの`Download All Profiles`ボタンで一気に作成済みのProvisioning Profileのダウンロード・更新ができて便利なので、筆者は主にそちらを用いてローカルのProvisioning Profileの更新を行なっています。

![](images/chapter3/profile.png)

作業は以上となります。初めてだと色々やるべきことが多く感じますが、慣れた2回目以降はサクッとできるようになると思います。

## 3.2 プッシュ通知送信の2つの方式

現状、プッシュ通知送信の方式は2つあり、本書では後発で洗練されて使いやすいHTTP/2方式でのやり方で説明していきます。

- [HTTP/2方式](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1)
  - 2015年12月から使えるようになった新しい方式
- Binary Provider API
  - [レガシーな方式](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/BinaryProviderAPI.html#//apple_ref/doc/uid/TP40008194-CH13-SW1)


以前のBinary Provide APIでは、APNsサーバにリクエストした通知が成功したかどうかを知るには、通知発行元のサーバが別のAPNsフィードバックサーバにいちいち問い合わせ（ポーリング）しなくてはいけない作りになっていました。また、APNsサーバへのリクエストも[バイナリAPIというWeb標準ではない独特のもの](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/LegacyNotificationFormat.html#//apple_ref/doc/uid/TP40008194-CH14-SW1)でした。

そして、2015年12月にHTTP/2の方式が使えるようになり、それは直接結果を受け取れる自然な構成となっています。また、1接続で並行して通知リクエストを行え、効率良く処理が可能となります。

通知発行結果は、[レスポンスに含まれる9種類のステータスコード・Reason](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW1)で、次のような項目を判別でき、それによって適切なハンドリングが可能です。

- 通知が成功したか
- 証明書の期限が切れていないか
- リクエスト数が制限されていないか
- ペイロードサイズが大きすぎないか

Binary Provider API | HTTP/2方式
--- | ---
![](images/chapter3/legacy.png) | ![](images/chapter3/http2.png)
